services:
  mongodb-master:
    image: mongo:6.0.8
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - mongodb-master:/data/db
      # - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - backbone-network
    depends_on:
      - mongodb-slave1
      - mongodb-slave2
    links:
      - mongodb-slave1
      - mongodb-slave2
    environment:
      MONGODB_USERNAME: backbone
      MONGODB_PASSWORD: password
      MONGODB_DATABASE: backbone-db
      MONGODB_PRIMARY_ROOT_USER: root
      MONGODB_ROOT_PASSWORD: password
      SERVER_DB: backbone-db
      SERVER_USER: backbone
      SERVER_DB_PASSWORD: password
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 10s
      retries: 10

    entrypoint:
      ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "mongodb_replica_set"]

  mongodb-slave1:
    image: mongo:6.0.8
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - mongodb-slave1:/data/db

    networks:
      - backbone-network
    entrypoint:
      ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "mongodb_replica_set"]

  mongodb-slave2:
    image: mongo:6.0.8
    deploy:
      restart_policy:
        condition: on-failure
    volumes:
      - mongodb-slave2:/data/db
    networks:
      - backbone-network
    entrypoint:
      ["/usr/bin/mongod", "--bind_ip_all", "--replSet", "mongodb_replica_set"]

  redis:
    image: redis/redis-stack
    volumes:
      - backbone-redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backbone-network
  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backbone-network

volumes:
  mongodb-master:
  mongodb-slave1:
  mongodb-slave2:
  backbone-redis:
  rabbitmq_data:

networks:
  backbone-network:
    external: true
